<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ApBoard.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ApBoard.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Dec 18 09:57:00 2017
<BR><P>
<H3>Maximum Stack Usage =       1192 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Sys_Task &rArr; Rola_Send_Task &rArr; SX1276_Pin_PowerOff &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">MemManage_Handler</a><BR>
 <LI><a href="#[9]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">BusFault_Handler</a><BR>
 <LI><a href="#[a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SVC_Handler</a><BR>
 <LI><a href="#[c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">DebugMon_Handler</a><BR>
 <LI><a href="#[d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">PendSV_Handler</a><BR>
 <LI><a href="#[16]">ACMP0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">ACMP0_IRQHandler</a><BR>
 <LI><a href="#[53]">CMU_OscillatorEnable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">CMU_OscillatorEnable</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ACMP0_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[17]">ADC0_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[9]">BusFault_Handler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[20]">CMU_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[25]">CRYOTIMER_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[22]">CRYPTO_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[f]">EMU_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[12]">GPIO_EVEN_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[1a]">GPIO_ODD_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[19]">I2C0_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[18]">IDAC0_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[11]">LDMA_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[23]">LETIMER0_IRQHandler</a> from api.o(i.LETIMER0_IRQHandler) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[1e]">LEUART0_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[21]">MSC_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[1f]">PCNT0_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[24]">RTCC_IRQHandler</a> from api.o(i.RTCC_IRQHandler) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[0]">SX1276Init</a> from sx1276.o(i.SX1276Init) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[3]">SX1276Process</a> from sx1276.o(i.SX1276Process) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[4]">SX1276Reset</a> from sx1276.o(i.SX1276Reset) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[2]">SX1276StartRx</a> from sx1276.o(i.SX1276StartRx) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[1]">SX1276StartTx</a> from sx1276.o(i.SX1276StartTx) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[e]">SysTick_Handler</a> from api.o(i.SysTick_Handler) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_efm32jg1b.o(i.SystemInit) referenced from startup_efm32jg1b.o(.text)
 <LI><a href="#[13]">TIMER0_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[1b]">TIMER1_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[14]">USART0_RX_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[15]">USART0_TX_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[1c]">USART1_RX_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[1d]">USART1_TX_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[10]">WDOG0_IRQHandler</a> from startup_efm32jg1b.o(.text) referenced from startup_efm32jg1b.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_efm32jg1b.o(.text)
 <LI><a href="#[29]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[45]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[cf]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CRYOTIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CRYPTO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>GPIO_EVEN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPIO_ODD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IDAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>LDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>LEUART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>MSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PCNT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>USART0_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>USART0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WDOG0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32jg1b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartRx
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[97]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
</UL>

<P><STRONG><a name="[bb]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rola_Send_Task
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gravity_Sensor_Task
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_gravity
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rola_Send_Task
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Sensor_Task
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gravity_Sensor_Task
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Sensor_Task
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Sensor_Task
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_gravity
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rola_Send_Task
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetFreq
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetFreq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Sensor_Task
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gravity_Sensor_Task
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Sensor_Task
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rola_Send_Task
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gravity_Sensor_Task
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[d9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[da]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[db]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[33]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[3b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[dd]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>CMU_ClockEnable</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, em_cmu.o(i.CMU_ClockEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CMU_ClockEnable &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncReg
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSPM_Init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtccSetup
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LETIMER_setup
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableLFClocks
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableHFClocks
</UL>

<P><STRONG><a name="[4b]"></a>CMU_ClockFreqGet</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, em_cmu.o(i.CMU_ClockFreqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgClkGet
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxClkGet
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_Log2ToDiv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateSyncSet
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusFreqSet
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>

<P><STRONG><a name="[5a]"></a>CMU_ClockSelectGet</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, em_cmu.o(i.CMU_ClockSelectGet))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emState
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgClkGet
</UL>

<P><STRONG><a name="[51]"></a>CMU_ClockSelectSet</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, em_cmu.o(i.CMU_ClockSelectSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CMU_ClockSelectSet &rArr; CMU_OscillatorEnable &rArr;  CMU_OscillatorEnable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHfLeConfig
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHfLeConfig
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateMax
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateControl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtccSetup
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LETIMER_setup
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableLFClocks
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emState
</UL>

<P><STRONG><a name="[58]"></a>CMU_HFRCOBandSet</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, em_cmu.o(i.CMU_HFRCOBandSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CMU_HFRCOBandSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHfLeConfig
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateMax
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateControl
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCODevinfoGet
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitRead
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[53]"></a>CMU_OscillatorEnable</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, em_cmu.o(i.CMU_OscillatorEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = CMU_OscillatorEnable &rArr;  CMU_OscillatorEnable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorTuningWait
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorTuningSet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorTuningOptimize
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorTuningGet
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>

<P><STRONG><a name="[5e]"></a>CMU_OscillatorTuningGet</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, em_cmu.o(i.CMU_OscillatorTuningGet))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
</UL>

<P><STRONG><a name="[5c]"></a>CMU_OscillatorTuningOptimize</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, em_cmu.o(i.CMU_OscillatorTuningOptimize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CMU_OscillatorTuningOptimize &rArr; CMU_OscillatorTuningWait
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorTuningWait
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
</UL>

<P><STRONG><a name="[5f]"></a>CMU_OscillatorTuningSet</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, em_cmu.o(i.CMU_OscillatorTuningSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CMU_OscillatorTuningSet &rArr; BUS_RegMaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRegIshUpperVal
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegMaskedWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
</UL>

<P><STRONG><a name="[5d]"></a>CMU_OscillatorTuningWait</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, em_cmu.o(i.CMU_OscillatorTuningWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMU_OscillatorTuningWait
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorTuningOptimize
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
</UL>

<P><STRONG><a name="[62]"></a>EMU_DCDCModeSet</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, em_emu.o(i.EMU_DCDCModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EMU_DCDCModeSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM4
</UL>

<P><STRONG><a name="[c7]"></a>EMU_EM4Init</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, em_emu.o(i.EMU_EM4Init))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_EM4H_LfxoRTCC
</UL>

<P><STRONG><a name="[64]"></a>EMU_EnterEM2</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, em_emu.o(i.EMU_EnterEM2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EMU_EnterEM2 &rArr; emState &rArr; CMU_ClockSelectSet &rArr; CMU_OscillatorEnable &rArr;  CMU_OscillatorEnable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emState
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdcHsFixLnBlock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdcFetCntSet
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gravity_Sensor_Task
</UL>

<P><STRONG><a name="[68]"></a>EMU_EnterEM4</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, em_emu.o(i.EMU_EnterEM4))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EMU_EnterEM4 &rArr; dcdcFetCntSet &rArr; currentLimitersUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCModeSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdcHsFixLnBlock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdcFetCntSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_EM4H_LfxoRTCC
</UL>

<P><STRONG><a name="[69]"></a>GPIO_PinModeSet</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, em_gpio.o(i.GPIO_PinModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_PinModeSet &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSPM_Init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Sensor_Task
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rola_Send_Task
</UL>

<P><STRONG><a name="[70]"></a>Gravity_Sensor_Task</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, system.o(i.Gravity_Sensor_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Gravity_Sensor_Task &rArr; MEMS_gravity &rArr; MEMS_read &rArr; MEMS_readInternal &rArr; i2c_read_byte &rArr; I2CSPM_Transfer &rArr; I2C_TransferInit &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_gravity
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_Power_Mode
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Disable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LETIMER_setup
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task
</UL>

<P><STRONG><a name="[72]"></a>HAL_Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, api.o(i.HAL_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Sensor_Task
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gravity_Sensor_Task
</UL>

<P><STRONG><a name="[79]"></a>I2CSPM_Init</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, i2cspm.o(i.I2CSPM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
</UL>

<P><STRONG><a name="[7c]"></a>I2CSPM_Transfer</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, i2cspm.o(i.I2CSPM_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2CSPM_Transfer &rArr; I2C_TransferInit &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_word
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_word
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_byte
</UL>

<P><STRONG><a name="[7f]"></a>I2C_BusFreqSet</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, em_i2c.o(i.I2C_BusFreqSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[7b]"></a>I2C_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, em_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusFreqSet
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSPM_Init
</UL>

<P><STRONG><a name="[7e]"></a>I2C_Transfer</STRONG> (Thumb, 690 bytes, Stack size 24 bytes, em_i2c.o(i.I2C_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSPM_Transfer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferInit
</UL>

<P><STRONG><a name="[7d]"></a>I2C_TransferInit</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, em_i2c.o(i.I2C_TransferInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_TransferInit &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSPM_Transfer
</UL>

<P><STRONG><a name="[23]"></a>LETIMER0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, api.o(i.LETIMER0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>LETIMER_CompareSet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, em_letimer.o(i.LETIMER_CompareSet))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LETIMER_setup
</UL>

<P><STRONG><a name="[83]"></a>LETIMER_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, em_letimer.o(i.LETIMER_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LETIMER_setup
</UL>

<P><STRONG><a name="[81]"></a>LETIMER_Init</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, em_letimer.o(i.LETIMER_Init))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LETIMER_setup
</UL>

<P><STRONG><a name="[73]"></a>LETIMER_setup</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, api.o(i.LETIMER_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LETIMER_setup &rArr; CMU_ClockSelectSet &rArr; CMU_OscillatorEnable &rArr;  CMU_OscillatorEnable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LETIMER_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LETIMER_Enable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LETIMER_CompareSet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gravity_Sensor_Task
</UL>

<P><STRONG><a name="[71]"></a>MEMS_Power_Mode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mems.o(i.MEMS_Power_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MEMS_Power_Mode &rArr; i2c_write_byte &rArr; I2CSPM_Transfer &rArr; I2C_TransferInit &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gravity_Sensor_Task
</UL>

<P><STRONG><a name="[75]"></a>MEMS_gravity</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mems.o(i.MEMS_gravity))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MEMS_gravity &rArr; MEMS_read &rArr; MEMS_readInternal &rArr; i2c_read_byte &rArr; I2CSPM_Transfer &rArr; I2C_TransferInit &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_read
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gravity_Sensor_Task
</UL>

<P><STRONG><a name="[87]"></a>MEMS_init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, mems.o(i.MEMS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MEMS_init &rArr; i2c_write_byte &rArr; I2CSPM_Transfer &rArr; I2C_TransferInit &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
</UL>

<P><STRONG><a name="[86]"></a>MEMS_read</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mems.o(i.MEMS_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MEMS_read &rArr; MEMS_readInternal &rArr; i2c_read_byte &rArr; I2CSPM_Transfer &rArr; I2C_TransferInit &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_readInternal
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_gravity
</UL>

<P><STRONG><a name="[cd]"></a>RTCC_ChannelInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, em_rtcc.o(i.RTCC_ChannelInit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtccSetup
</UL>

<P><STRONG><a name="[8a]"></a>RTCC_Enable</STRONG> (Thumb, 52 bytes, Stack size 528 bytes, em_rtcc.o(i.RTCC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = RTCC_Enable &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtccSetup
</UL>

<P><STRONG><a name="[24]"></a>RTCC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, api.o(i.RTCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>RTCC_Init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, em_rtcc.o(i.RTCC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtccSetup
</UL>

<P><STRONG><a name="[8d]"></a>Rola_Send_Task</STRONG> (Thumb, 458 bytes, Stack size 544 bytes, system.o(i.Rola_Send_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = Rola_Send_Task &rArr; SX1276_Pin_PowerOff &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Pin_PowerOff
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task
</UL>

<P><STRONG><a name="[90]"></a>SEGGER_RTT_ConfigUpBuffer</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_ConfigUpBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SEGGER_RTT_ConfigUpBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
</UL>

<P><STRONG><a name="[93]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[8c]"></a>SEGGER_RTT_WriteString</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteString))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_Enable
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartTx
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Pin_PowerOff
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Sensor_Task
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rola_Send_Task
</UL>

<P><STRONG><a name="[0]"></a>SX1276Init</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, sx1276.o(i.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SX1276Init &rArr; SX1276SetFreq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitSync
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxPower
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSymbTimeout
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSpreadingFactor
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPayloadMaxLength
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPayloadLength
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLowDatarateOptimize
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetHeader
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetFreq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetCrc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetCodingRate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetBandWidth
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>SX1276Process</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, sx1276.o(i.SX1276Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SX1276Process &rArr; SX1276ReadFifo &rArr; SX1276ReadBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInGet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[a7]"></a>SX1276Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSpreadingFactor
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetHeader
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetCrc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetCodingRate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetBandWidth
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Process
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[a9]"></a>SX1276ReadBuffer</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sx1276.o(i.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SX1276ReadBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SpiTransfer
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSymbTimeout
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLowDatarateOptimize
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>

<P><STRONG><a name="[a8]"></a>SX1276ReadFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx1276.o(i.SX1276ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SX1276ReadFifo &rArr; SX1276ReadBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Process
</UL>

<P><STRONG><a name="[4]"></a>SX1276Reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1276.o(i.SX1276Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SX1276Reset &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[9d]"></a>SX1276SetBandWidth</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetBandWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SX1276SetBandWidth &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[9f]"></a>SX1276SetCodingRate</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetCodingRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SX1276SetCodingRate &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[a1]"></a>SX1276SetCrc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SX1276SetCrc &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[9b]"></a>SX1276SetFreq</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sx1276.o(i.SX1276SetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SX1276SetFreq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[9e]"></a>SX1276SetHeader</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SX1276SetHeader &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[a5]"></a>SX1276SetLowDatarateOptimize</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetLowDatarateOptimize))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SX1276SetLowDatarateOptimize &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[9a]"></a>SX1276SetOpMode</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SX1276SetOpMode &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task_Init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartTx
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartRx
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Pin_PowerOff
</UL>

<P><STRONG><a name="[a4]"></a>SX1276SetPayloadLength</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SX1276SetPayloadLength &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[a3]"></a>SX1276SetPayloadMaxLength</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetPayloadMaxLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SX1276SetPayloadMaxLength &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[a0]"></a>SX1276SetSpreadingFactor</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetSpreadingFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SX1276SetSpreadingFactor &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[a2]"></a>SX1276SetSymbTimeout</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetSymbTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SX1276SetSymbTimeout &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[9c]"></a>SX1276SetTxPower</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SX1276SetTxPower &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[2]"></a>SX1276StartRx</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, sx1276.o(i.SX1276StartRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SX1276StartRx &rArr; SX1276SetOpMode &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>SX1276StartTx</STRONG> (Thumb, 168 bytes, Stack size 528 bytes, sx1276.o(i.SX1276StartTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = SX1276StartTx &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>SX1276Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartTx
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartRx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxPower
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSpreadingFactor
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPayloadMaxLength
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPayloadLength
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLowDatarateOptimize
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetHeader
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetFreq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetCrc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetCodingRate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetBandWidth
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Process
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rola_Send_Task
</UL>

<P><STRONG><a name="[ab]"></a>SX1276WriteBuffer</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sx1276.o(i.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SX1276WriteBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SpiTransfer
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartTx
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartRx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSymbTimeout
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>

<P><STRONG><a name="[ad]"></a>SX1276WriteFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx1276.o(i.SX1276WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SX1276WriteFifo &rArr; SX1276WriteBuffer &rArr; GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartTx
</UL>

<P><STRONG><a name="[8f]"></a>SX1276_Pin_PowerOff</STRONG> (Thumb, 54 bytes, Stack size 520 bytes, sx1276.o(i.SX1276_Pin_PowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = SX1276_Pin_PowerOff &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rola_Send_Task
</UL>

<P><STRONG><a name="[47]"></a>SYSTEM_ChipRevisionGet</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, em_system.o(i.SYSTEM_ChipRevisionGet))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_Init
</UL>

<P><STRONG><a name="[ae]"></a>Sensor_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, api.o(i.Sensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Sensor_Init &rArr; MEMS_init &rArr; i2c_write_byte &rArr; I2CSPM_Transfer &rArr; I2C_TransferInit &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_Power_Mode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSPM_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_word
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_word
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>SysTick_Disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, api.o(i.SysTick_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gravity_Sensor_Task
</UL>

<P><STRONG><a name="[78]"></a>SysTick_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, api.o(i.SysTick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gravity_Sensor_Task
</UL>

<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, api.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>Sys_Task</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, system.o(i.Sys_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = Sys_Task &rArr; Rola_Send_Task &rArr; SX1276_Pin_PowerOff &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Sensor_Task
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rola_Send_Task
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gravity_Sensor_Task
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_EM4H_LfxoRTCC
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>Sys_Task_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, system.o(i.Sys_Task_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = Sys_Task_Init &rArr; rtccSetup &rArr; RTCC_Enable &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtccSetup
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>SystemClock_Config</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, api.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SystemClock_Config &rArr; CMU_ClockSelectSet &rArr; CMU_OscillatorEnable &rArr;  CMU_OscillatorEnable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>SystemCoreClockGet</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, system_efm32jg1b.o(i.SystemCoreClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
</UL>

<P><STRONG><a name="[4c]"></a>SystemHFClockGet</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, system_efm32jg1b.o(i.SystemHFClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgClkGet
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_efm32jg1b.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32jg1b.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>SystemLFRCOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_efm32jg1b.o(i.SystemLFRCOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
</UL>

<P><STRONG><a name="[ca]"></a>SystemLFXOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_efm32jg1b.o(i.SystemLFXOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
</UL>

<P><STRONG><a name="[c8]"></a>SystemMaxCoreClockGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_efm32jg1b.o(i.SystemMaxCoreClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateMax
</UL>

<P><STRONG><a name="[cb]"></a>SystemULFRCOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_efm32jg1b.o(i.SystemULFRCOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
</UL>

<P><STRONG><a name="[b2]"></a>Temp_Sensor_Task</STRONG> (Thumb, 184 bytes, Stack size 552 bytes, system.o(i.Temp_Sensor_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = Temp_Sensor_Task &rArr; i2c_write_word &rArr; I2CSPM_Transfer &rArr; I2C_TransferInit &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_word
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_word
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task
</UL>

<P><STRONG><a name="[b9]"></a>USART_BaudrateSyncSet</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, em_usart.o(i.USART_BaudrateSyncSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART_BaudrateSyncSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitSync
</UL>

<P><STRONG><a name="[99]"></a>USART_InitSync</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, em_usart.o(i.USART_InitSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_InitSync &rArr; USART_BaudrateSyncSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Reset
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateSyncSet
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[ba]"></a>USART_Reset</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, em_usart.o(i.USART_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitSync
</UL>

<P><STRONG><a name="[aa]"></a>USART_SpiTransfer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, em_usart.o(i.USART_SpiTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[bc]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e0]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[8b]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_Enable
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartTx
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Pin_PowerOff
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Sensor_Task
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rola_Send_Task
</UL>

<P><STRONG><a name="[e1]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[e2]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[e3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[e5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[b4]"></a>em_EM4H_LfxoRTCC</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, api.o(i.em_EM4H_LfxoRTCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = em_EM4H_LfxoRTCC &rArr; disableClocks &rArr; disableLFClocks &rArr; CMU_ClockSelectSet &rArr; CMU_OscillatorEnable &rArr;  CMU_OscillatorEnable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EM4Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableClocks
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task
</UL>

<P><STRONG><a name="[89]"></a>i2c_read_byte</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, mems.o(i.i2c_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = i2c_read_byte &rArr; I2CSPM_Transfer &rArr; I2C_TransferInit &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSPM_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_readInternal
</UL>

<P><STRONG><a name="[af]"></a>i2c_read_word</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, api.o(i.i2c_read_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = i2c_read_word &rArr; I2CSPM_Transfer &rArr; I2C_TransferInit &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSPM_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Sensor_Task
</UL>

<P><STRONG><a name="[85]"></a>i2c_write_byte</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, mems.o(i.i2c_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = i2c_write_byte &rArr; I2CSPM_Transfer &rArr; I2C_TransferInit &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSPM_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_Power_Mode
</UL>

<P><STRONG><a name="[b0]"></a>i2c_write_word</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, api.o(i.i2c_write_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = i2c_write_word &rArr; I2CSPM_Transfer &rArr; I2C_TransferInit &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSPM_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Sensor_Task
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = main &rArr; Sys_Task &rArr; Rola_Send_Task &rArr; SX1276_Pin_PowerOff &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b6]"></a>rtccSetup</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, api.o(i.rtccSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = rtccSetup &rArr; RTCC_Enable &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_Enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_ChannelInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5b]"></a>BUS_RegBitRead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, em_cmu.o(i.BUS_RegBitRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorTuningSet
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHfLeConfig
</UL>

<P><STRONG><a name="[4a]"></a>BUS_RegBitWrite</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, em_cmu.o(i.BUS_RegBitWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHfLeConfig
</UL>

<P><STRONG><a name="[61]"></a>BUS_RegMaskedWrite</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, em_cmu.o(i.BUS_RegMaskedWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BUS_RegMaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorTuningSet
</UL>

<P><STRONG><a name="[59]"></a>CMU_HFRCODevinfoGet</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, em_cmu.o(i.CMU_HFRCODevinfoGet))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
</UL>

<P><STRONG><a name="[4e]"></a>CMU_Log2ToDiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, em_cmu.o(i.CMU_Log2ToDiv))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[50]"></a>auxClkGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, em_cmu.o(i.auxClkGet))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgClkGet
</UL>

<P><STRONG><a name="[4f]"></a>dbgClkGet</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, em_cmu.o(i.dbgClkGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dbgClkGet
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxClkGet
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[56]"></a>flashWaitStateControl</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, em_cmu.o(i.flashWaitStateControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flashWaitStateControl
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateMax
</UL>

<P><STRONG><a name="[54]"></a>flashWaitStateMax</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, em_cmu.o(i.flashWaitStateMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flashWaitStateMax &rArr; flashWaitStateControl
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateControl
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemMaxCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>

<P><STRONG><a name="[57]"></a>getHfLeConfig</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, em_cmu.o(i.getHfLeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getHfLeConfig &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>

<P><STRONG><a name="[60]"></a>getRegIshUpperVal</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, em_cmu.o(i.getRegIshUpperVal))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorTuningSet
</UL>

<P><STRONG><a name="[4d]"></a>lfClkGet</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, em_cmu.o(i.lfClkGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lfClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemULFRCOClockGet
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFXOClockGet
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFRCOClockGet
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[52]"></a>setHfLeConfig</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, em_cmu.o(i.setHfLeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = setHfLeConfig &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>

<P><STRONG><a name="[49]"></a>syncReg</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, em_cmu.o(i.syncReg))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>

<P><STRONG><a name="[63]"></a>BUS_RegBitWrite</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, em_emu.o(i.BUS_RegBitWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCModeSet
</UL>

<P><STRONG><a name="[c3]"></a>currentLimitersUpdate</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, em_emu.o(i.currentLimitersUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = currentLimitersUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdcFetCntSet
</UL>

<P><STRONG><a name="[66]"></a>dcdcFetCntSet</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, em_emu.o(i.dcdcFetCntSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dcdcFetCntSet &rArr; currentLimitersUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentLimitersUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
</UL>

<P><STRONG><a name="[67]"></a>dcdcHsFixLnBlock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, em_emu.o(i.dcdcHsFixLnBlock))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
</UL>

<P><STRONG><a name="[65]"></a>emState</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, em_emu.o(i.emState))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = emState &rArr; CMU_ClockSelectSet &rArr; CMU_OscillatorEnable &rArr;  CMU_OscillatorEnable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
</UL>

<P><STRONG><a name="[6c]"></a>BUS_RegBitWrite</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, em_gpio.o(i.BUS_RegBitWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>

<P><STRONG><a name="[6b]"></a>GPIO_PinOutClear</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, em_gpio.o(i.GPIO_PinOutClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_PinOutClear &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>

<P><STRONG><a name="[6a]"></a>GPIO_PinOutSet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, em_gpio.o(i.GPIO_PinOutSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>

<P><STRONG><a name="[80]"></a>BUS_RegBitWrite</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, em_i2c.o(i.BUS_RegBitWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[7a]"></a>BUS_RegBitWrite</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, i2cspm.o(i.BUS_RegBitWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSPM_Init
</UL>

<P><STRONG><a name="[46]"></a>CHIP_Init</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, main.o(i.CHIP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CHIP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_ChipRevisionGet
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>MEMS_readInternal</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, mems.o(i.MEMS_readInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MEMS_readInternal &rArr; i2c_read_byte &rArr; I2CSPM_Transfer &rArr; I2C_TransferInit &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_read
</UL>

<P><STRONG><a name="[84]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, api.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtccSetup
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LETIMER_setup
</UL>

<P><STRONG><a name="[c4]"></a>disableClocks</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, api.o(i.disableClocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = disableClocks &rArr; disableLFClocks &rArr; CMU_ClockSelectSet &rArr; CMU_OscillatorEnable &rArr;  CMU_OscillatorEnable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableLFClocks
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableHFClocks
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_EM4H_LfxoRTCC
</UL>

<P><STRONG><a name="[c5]"></a>disableHFClocks</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, api.o(i.disableHFClocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = disableHFClocks &rArr; CMU_ClockEnable &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableClocks
</UL>

<P><STRONG><a name="[c6]"></a>disableLFClocks</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, api.o(i.disableLFClocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = disableLFClocks &rArr; CMU_ClockSelectSet &rArr; CMU_OscillatorEnable &rArr;  CMU_OscillatorEnable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableClocks
</UL>

<P><STRONG><a name="[b3]"></a>BUS_RegBitWrite</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, system.o(i.BUS_RegBitWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task
</UL>

<P><STRONG><a name="[6e]"></a>BUS_RegBitWrite</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, sx1276.o(i.BUS_RegBitWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>

<P><STRONG><a name="[a6]"></a>GPIO_PinInGet</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, sx1276.o(i.GPIO_PinInGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinInGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Process
</UL>

<P><STRONG><a name="[6d]"></a>GPIO_PinOutClear</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sx1276.o(i.GPIO_PinOutClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_PinOutClear &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Pin_PowerOff
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[6f]"></a>GPIO_PinOutSet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sx1276.o(i.GPIO_PinOutSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_PinOutSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[91]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[94]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[96]"></a>_WriteBlocking</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[95]"></a>_WriteNoCheck</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[be]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bd]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[c1]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c0]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[29]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
