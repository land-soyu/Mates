#include "app_util_platform.h"
#include "nrf_gpio.h"
#include "nrf_delay.h"
#include "boards.h"
#include "app_error.h"
#include <string.h>
#include "nrf_log.h"
#include "nrf_log_ctrl.h"
#include "nrf_log_default_backends.h"
#include "nrf_drv_twi.h"
#include "algorithm.h"
#include "i2c.h"

uint32_t aun_ir_buffer[500]; //IR LED sensor data
int32_t n_ir_buffer_length;    //data length
uint32_t aun_red_buffer[500];    //Red LED sensor data
int32_t n_sp02; //SPO2 value
int8_t ch_spo2_valid;   //indicator to show if the SP02 calculation is valid
int32_t n_heart_rate;   //heart rate value
int8_t  ch_hr_valid;    //indicator to show if the heart rate calculation is valid
uint8_t uch_dummy;

static uint32_t bat_v = 0, bt_c = 0;

unsigned char zaigle_image[] =
{
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x38,0x38,0x38,0x38,0x38,0x38,
0x38,0x38,0xB8,0xF8,0xF8,0xF8,0x78,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x3C,0x3C,0x18,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xF0,0xF8,
0x7C,0x3F,0x1F,0x07,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x8E,0x8E,0xC7,0xC7,0xC7,
0xC7,0xC7,0xEF,0xFE,0xFE,0xFC,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,
0xE0,0xF8,0xFE,0xFE,0x0F,0x07,0x07,0x07,0x07,0x0E,0x3C,0xFF,0xFF,0xFF,0x00,0x00,
0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xE0,0xF8,0xFC,0xFE,0x6F,0x67,0x67,0x67,
0x67,0x6F,0x7E,0x7C,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x3C,0x3F,0x3F,0x3F,0x3B,0x39,
0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x00,0x00,0x0F,0x1F,0x3F,0x3D,0x38,0x38,
0x38,0x18,0x0C,0x3F,0x3F,0x3F,0x00,0x00,0x00,0x00,0x3F,0x3F,0x3F,0x00,0x00,0x00,
0x03,0x0F,0x1F,0x1F,0x3C,0x38,0x38,0x38,0x18,0x1C,0xEF,0xFF,0xFF,0xFF,0x00,0x00,
0x00,0x00,0x3F,0x3F,0x3F,0x00,0x00,0x00,0x03,0x0F,0x1F,0x1F,0x3C,0x3C,0x38,0x38,
0x38,0x38,0x18,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x07,0x07,0x0E,0x0E,0x0E,0x0E,0x0E,0x0F,0x07,0x07,0x03,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

static unsigned char screen_image[] =
{
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};


unsigned char large_number[][64] =		//	16 * 32
{
	{	//	large 0
		0x00,0x00,0xF8,0xFC,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0xFC,0xF8,0x00,0x00,
		0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,
		0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,
		0x00,0x00,0x1F,0x3F,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3F,0x1F,0x00,0x00
	},
	{	//	large 1
		0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x0C,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x3F,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{	//	large 2
		0x00,0x00,0x00,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0xFC,0xF8,0x00,0x00,
		0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xFF,0xFF,0x00,0x00,
		0x00,0x00,0xFF,0xFF,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,
		0x00,0x00,0x1F,0x3F,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x00,0x00
	},
	{	//	large 3
		0x00,0x00,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0xFC,0xF8,0x00,0x00,
		0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xFF,0x7F,0x00,0x00,
		0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xFF,0xFE,0x00,0x00,
		0x00,0x00,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3F,0x1F,0x00,0x00
	},
	{	//	large 4
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xF8,0x1C,0x0C,0xFC,0xFC,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0xC0,0xF8,0x7F,0x0F,0x01,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,
		0x00,0x00,0x70,0x7E,0x7F,0x63,0x60,0x60,0x60,0x60,0x60,0xFF,0xFF,0x60,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x3F,0x00,0x00,0x00
	},
	{	//	large 5
		0x00,0x00,0xF8,0xFC,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x00,0x00,0x00,
		0x00,0x00,0xFF,0xFF,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,
		0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xFF,0xFF,0x00,0x00,
		0x00,0x00,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3F,0x1F,0x00,0x00
	},
	{	//	large 6
		0x00,0x00,0xF8,0xFC,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x00,0x00,0x00,
		0x00,0x00,0xFF,0xFF,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,
		0x00,0x00,0xFF,0xFF,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xFF,0xFF,0x00,0x00,
		0x00,0x00,0x1F,0x3F,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3F,0x1F,0x00,0x00
	},
	{	//	large 7
		0x00,0x00,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x8C,0xFC,0x3C,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xFF,0x07,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xFE,0x3F,0x01,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x3F,0x07,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{	//	large 8
		0x00,0x00,0xF8,0xFC,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0xFC,0xF8,0x00,0x00,
		0x00,0x00,0x7F,0xFF,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xFF,0x7F,0x00,0x00,
		0x00,0x00,0xFE,0xFF,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xFF,0xFE,0x00,0x00,
		0x00,0x00,0x1F,0x3F,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3F,0x1F,0x00,0x00
	},
	{	//	large 9
		0x00,0x00,0xF8,0xFC,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0xFC,0xF8,0x00,0x00,
		0x00,0x00,0xFF,0xFF,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xFF,0xFF,0x00,0x00,
		0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xFF,0xFF,0x00,0x00,
		0x00,0x00,0x00,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3F,0x1F,0x00,0x00
	},
	{	//	large dot
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	}
};
unsigned char small_number[][10] =		//	8 * 16
{
	{	//	small 0
		0xC0,0x20,0x20,0x20,0xC0,0x1F,0x20,0x20,0x20,0x1F
	},
	{	//	small 1
		0x00,0x20,0xE0,0x00,0x00,0x00,0x00,0x3F,0x00,0x00
	},
	{	//	small 2
		0xC0,0x20,0x20,0x20,0xC0,0x30,0x28,0x24,0x22,0x21
	},
	{	//	small 3
		0xC0,0x20,0x20,0x20,0xC0,0x18,0x20,0x22,0x22,0x1D
	},
	{	//	small 4
		0x00,0x00,0xC0,0xE0,0x00,0x0C,0x0B,0x08,0x3F,0x08
	},
	{	//	small 5
		0xE0,0x20,0x20,0x20,0x20,0x11,0x21,0x21,0x21,0x1E
	},
	{	//	small 6
		0xC0,0x20,0x20,0x20,0x40,0x1F,0x21,0x21,0x21,0x1E
	},
	{	//	small 7
		0x20,0x20,0x20,0xA0,0x60,0x00,0x30,0x0E,0x01,0x00
	},
	{	//	small 8
		0xC0,0x20,0x20,0x20,0xC0,0x1D,0x22,0x22,0x22,0x1D
	},
	{	//	small 9
		0xC0,0x20,0x20,0x20,0xC0,0x11,0x22,0x22,0x22,0x1F
	},
	{	//	small /
		0x00,0x00,0x80,0x60,0x00,
		0x00,0x30,0x0F,0x00,0x00
	}
};
unsigned char small_percent[16] =		//	8 * 16
	{	//	small %
		0xC0,0x20,0xC0,0x00,0x00,0xC0,0x20,0x00,0x00,0x21,0x18,0x06,0x03,0x18,0x24,0x18	
	};
unsigned char wday_number[][48] =		//	24 * 16
{
	{//	sun
		0xC0,0x20,0x20,0x20,0x40,0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x00,0x80,0x80,0x80,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x11,0x22,0x22,0x22,0x1C,0x00,0x1F,0x20,0x20,0x20,0x1F,0x00,0x3F,0x00,0x00,0x00,
		0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{//	mon
		0xE0,0x20,0xC0,0x00,0xC0,0x20,0xE0,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x80,
		0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
		0x3F,0x00,0x03,0x0C,0x03,0x00,0x3F,0x00,0x1F,0x20,0x20,0x20,0x1F,0x00,0x3F,0x00,
		0x00,0x00,0x3F,0x00,0x00,0x00,0x00,0x00
	},
	{//	tue
		0x20,0x20,0x20,0xE0,0x20,0x20,0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x00,0x80,0x80,
		0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x1F,0x00,0x1F,0x24,0x24,
		0x24,0x17,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{//	wed
		0xE0,0x00,0x00,0x80,0x00,0x00,0xE0,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x80,
		0x80,0x80,0xE0,0x00,0x00,0x00,0x00,0x00,
		0x1F,0x20,0x1E,0x01,0x1E,0x20,0x1F,0x00,0x1F,0x24,0x24,0x24,0x17,0x00,0x1F,0x20,
		0x20,0x20,0x3F,0x00,0x00,0x00,0x00,0x00
	},
	{//	thu
		0x20,0x20,0xE0,0x20,0x20,0x00,0xE0,0x80,0x80,0x80,0x00,0x00,0x80,0x00,0x00,0x00,
		0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x3F,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x3F,0x00,0x1F,0x20,0x20,0x20,
		0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{//	fri
		0xE0,0x20,0x20,0x20,0x20,0x00,0x00,0x80,0x00,0x80,0x80,0x00,0x00,0xA0,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x3F,0x02,0x02,0x02,0x00,0x00,0x00,0x3F,0x01,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{//	sat
		0xC0,0x20,0x20,0x20,0x40,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x80,0xE0,0x80,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x11,0x22,0x22,0x22,0x1C,0x00,0x19,0x24,0x24,0x24,0x3F,0x00,0x00,0x3F,0x20,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	}

};

unsigned char icon[][32] =		//	16 * 16
{
	{	//	hartrate
		0xF0,0xFC,0xFE,0xFF,0xFF,0xFF,0xFE,0xFC,0xFC,0xFE,0xFF,0xFF,0xFF,0xFE,0xFC,0xF0,
		0x00,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF,0xFF,0x7F,0x3F,0x1F,0x0F,0x07,0x03,0x00
	},
	{	//	spo2
		0x00,0x00,0x00,0x00,0xC0,0xE0,0xF0,0xFC,0xFF,0xFC,0xF0,0xE0,0x80,0x00,0x00,0x00,
		0x00,0x00,0x00,0x0E,0x3F,0x7F,0x7F,0xFF,0xFF,0xFF,0x7F,0x7F,0x1F,0x0E,0x00,0x00
	},
	{	//	stress middle
		0xE0,0x18,0x04,0x02,0x32,0x31,0x01,0x01,0x01,0x01,0x31,0x32,0x02,0x04,0x18,0xE0,
		0x07,0x18,0x20,0x48,0x48,0x88,0x88,0x88,0x88,0x88,0x88,0x48,0x48,0x20,0x18,0x07
	},
	{	//	fat middle
		0x00,0x00,0x04,0x08,0x10,0x20,0xE6,0xEF,0xEF,0xE6,0x20,0x10,0x08,0x04,0x00,0x00,
		0x00,0x00,0x00,0x80,0xE0,0x78,0x1F,0x0F,0x0F,0x1F,0x78,0xE0,0x80,0x00,0x00,0x00
	},
	{	//	working
		0x00,0x78,0xFE,0xFF,0xFF,0xFF,0xFE,0x3C,0x00,0xE0,0xF0,0xF8,0xFC,0xFC,0xF8,0x00,
		0x00,0x00,0x19,0x3B,0x3B,0x1B,0x00,0x00,0x00,0x71,0xEF,0xEF,0x6F,0x07,0x01,0x00
	},
	{	//	kcal
		0x00,0x00,0x80,0x80,0x80,0x00,0x60,0x60,0x30,0xF8,0xF8,0xFF,0xFF,0xC7,0xE0,0x60,
		0x08,0x0A,0x0A,0x02,0x38,0x1C,0x0C,0x0C,0x0F,0x07,0x07,0xFF,0xFC,0x80,0x00,0x00
	},
	{	//	check
		0x00,0x00,0x00,0xF0,0xF8,0xFC,0xFC,0xFC,0xF8,0xFC,0xFC,0xFC,0xF8,0xF0,0x00,0x00,
		0x00,0x00,0x00,0x00,0x03,0x07,0x0F,0x1F,0x3F,0x1F,0x0F,0x07,0x03,0x00,0x00,0x00
	},
	{	//	check fail
		0x00,0x00,0x00,0x08,0x18,0x30,0x60,0xC0,0x80,0xC0,0x60,0x30,0x18,0x08,0x00,0x00,
		0x00,0x00,0x00,0x10,0x18,0x0C,0x06,0x03,0x01,0x03,0x06,0x0C,0x18,0x10,0x00,0x00
	},
	{	//	stress low
		0xE0,0x18,0x04,0x02,0x32,0x31,0x01,0x01,0x01,0x01,0x31,0x32,0x02,0x04,0x18,0xE0,
		0x07,0x18,0x20,0x44,0x48,0x88,0x90,0x90,0x90,0x90,0x88,0x48,0x44,0x20,0x18,0x07
	},
	{	//	stress high
		0xE0,0x18,0x24,0x22,0x12,0x11,0x01,0x01,0x01,0x01,0x11,0x12,0x22,0x24,0x18,0xE0,
		0x07,0x18,0x20,0x40,0x48,0x88,0x84,0x84,0x84,0x84,0x88,0x48,0x40,0x20,0x18,0x07
	},
	{	//	fat low
		0x00,0x00,0x00,0x00,0x80,0x40,0x26,0xEF,0xEF,0x26,0x40,0x80,0x00,0x00,0x00,0x00,
		0x00,0x00,0x02,0x81,0xC0,0x60,0x30,0x1F,0x1F,0x30,0x60,0xC0,0x81,0x02,0x00,0x00
	},
	{	//	fat high
		0x00,0x00,0x00,0x80,0xC0,0xE0,0xE6,0xEF,0xEF,0xE6,0xE0,0xC0,0x80,0x00,0x00,0x00,
		0x00,0x02,0x01,0x80,0xCF,0x7F,0x3F,0x3F,0x3F,0x3F,0x7F,0xCF,0x80,0x01,0x02,0x00
	}
};
unsigned char icon_unit[][64] =		//	32 * 16
{
	{	//	bpm
		0x00,0xFE,0x10,0x10,0x10,0xE0,0x00,0x00,0xF0,0x10,0x10,0x10,0xE0,0x00,0x00,0xF0,
		0x10,0x10,0xE0,0x10,0x10,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x0F,0x08,0x08,0x08,0x07,0x00,0x00,0x7F,0x08,0x08,0x08,0x07,0x00,0x00,0x0F,
		0x00,0x00,0x0F,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{	//	%
		0x00,0x00,0x00,0xF0,0x08,0x08,0xF0,0x00,0x00,0xC0,0x30,0x08,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x01,0x01,0x20,0x18,0x07,0x00,0x1E,0x21,0x21,0x1E,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{	//	level
		0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x80,0x40,0x40,0x40,0x80,0x00,0xC0,0x00,0x00,
		0x00,0xC0,0x00,0x80,0x40,0x40,0x40,0x80,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x3F,0x20,0x20,0x20,0x00,0x1F,0x22,0x22,0x22,0x23,0x00,0x00,0x0F,0x30,
		0x0F,0x00,0x00,0x1F,0x22,0x22,0x22,0x23,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,0x00
	},
	{	//	kg
		0x00,0x00,0xFC,0x00,0x80,0x40,0x20,0x00,0x00,0xC0,0x20,0x20,0x20,0xE0,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x1F,0x03,0x04,0x08,0x10,0x00,0x00,0x4F,0x90,0x90,0x90,0x7F,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{	//	working
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{	//	kcal
		0x00,0x00,0xF8,0x00,0x00,0x80,0x40,0x00,0x00,0x80,0x40,0x40,0x40,0x80,0x00,0x00,
		0x80,0x40,0x40,0x40,0x80,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x3F,0x06,0x09,0x10,0x20,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x00,0x00,
		0x1C,0x22,0x22,0x22,0x3F,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{	//	kg/m2
		0xFC,0x00,0x80,0x40,0x20,0x00,0x00,0xC0,0x20,0x20,0x20,0xE0,0x00,0x00,0x00,0xC0,
		0x38,0x00,0xE0,0x20,0x20,0xC0,0x20,0x20,0xC0,0x00,0x00,0x10,0x08,0x88,0x70,0x00,
		0x1F,0x03,0x04,0x08,0x10,0x00,0x00,0x4F,0x90,0x90,0x90,0x7F,0x00,0x00,0x38,0x07,
		0x00,0x00,0x1F,0x00,0x00,0x1F,0x00,0x00,0x1F,0x00,0x00,0x06,0x05,0x04,0x04,0x00
	}
};
unsigned char icon_title[][128] =		//	64 * 16
{
	{	//	bpm
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x40,0x80,0x00,0x00,0x00,
		0xC0,0x40,0x40,0x40,0x40,0x80,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x22,0x22,0x22,0x1D,0x00,0x00,0x00,
		0x3F,0x04,0x04,0x04,0x04,0x03,0x00,0x00,0x3F,0x03,0x0C,0x30,0x0C,0x03,0x3F,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{	//	spo2
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x40,0x40,0x40,0x80,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x40,0x40,0x80,0x00,0x00,0x00,
		0x00,0x80,0x40,0x40,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x22,0x22,0x24,0x24,0x18,0x00,0x00,
		0xFF,0x21,0x21,0x21,0x1E,0x00,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,0x00,
		0x00,0x31,0x28,0x24,0x22,0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{	//	level
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x40,0x40,0x40,0x80,0x00,0x40,
		0x40,0x40,0xC0,0x40,0x40,0x40,0x00,0xC0,0x40,0x40,0x40,0x40,0x80,0x00,0x00,0xC0,
		0x40,0x40,0x40,0x40,0x00,0x00,0x80,0x40,0x40,0x40,0x40,0x80,0x00,0x00,0x00,0x80,
		0x40,0x40,0x40,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x22,0x22,0x24,0x24,0x18,0x00,0x00,
		0x00,0x00,0x3F,0x00,0x00,0x00,0x00,0x3F,0x04,0x04,0x04,0x04,0x3B,0x00,0x00,0x3F,
		0x22,0x22,0x22,0x22,0x00,0x00,0x11,0x22,0x22,0x24,0x24,0x18,0x00,0x00,0x00,0x11,
		0x22,0x22,0x24,0x24,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{	//	fat
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x40,0x40,0x00,0x00,0x00,
		0x00,0xC0,0x00,0x00,0x00,0x40,0x40,0x40,0xC0,0x40,0x40,0x40,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x02,0x02,0x02,0x02,0x00,0x30,0x0C,
		0x0B,0x08,0x0B,0x0C,0x30,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{	//	step
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x40,0x40,0x40,0x80,0x00,0x40,
		0x40,0x40,0xC0,0x40,0x40,0x40,0x00,0xC0,0x40,0x40,0x40,0x40,0x00,0x00,0xC0,0x40,
		0x40,0x40,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x22,0x22,0x24,0x24,0x18,0x00,0x00,
		0x00,0x00,0x3F,0x00,0x00,0x00,0x00,0x3F,0x22,0x22,0x22,0x22,0x00,0x00,0x3F,0x04,
		0x04,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{	//	check
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x40,0x40,0x80,0x00,0x00,
		0xC0,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0xC0,0x40,0x40,0x40,0x40,0x00,0x00,0x00,
		0x80,0x40,0x40,0x40,0x80,0x00,0x00,0xC0,0x00,0x00,0x80,0x40,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x00,0x00,
		0x3F,0x02,0x02,0x02,0x02,0x3F,0x00,0x00,0x3F,0x22,0x22,0x22,0x22,0x00,0x00,0x0F,
		0x10,0x20,0x20,0x20,0x10,0x00,0x00,0x3F,0x02,0x05,0x08,0x10,0x20,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{	//	BFP
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x40,0x80,0x00,0x00,0x00,
		0xC0,0x40,0x40,0x40,0x40,0x00,0x00,0xC0,0x40,0x40,0x40,0x40,0x80,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x22,0x22,0x22,0x1D,0x00,0x00,0x00,
		0x3F,0x02,0x02,0x02,0x02,0x00,0x00,0x3F,0x04,0x04,0x04,0x04,0x03,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{	//	BMI
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x40,0x80,0x00,0x00,0x00,
		0xC0,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x22,0x22,0x22,0x1D,0x00,0x00,0x00,
		0x3F,0x03,0x0C,0x30,0x0C,0x03,0x3F,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	}
};

unsigned char icon_battery[][48] =		//	24 * 16
{
	{	//	0%
		0x00,0x00,0xE0,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xE0,0x00,0x00,0x00,
		0x00,0x00,0x3F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x3F,0x07,0x00,0x00
	},
	{	//	20%
		0x00,0x00,0xE0,0x20,0xA0,0xA0,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xE0,0x00,0x00,0x00,
		0x00,0x00,0x3F,0x20,0x2F,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x3F,0x07,0x00,0x00
	},
	{	//	40%
		0x00,0x00,0xE0,0x20,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xE0,0x00,0x00,0x00,
		0x00,0x00,0x3F,0x20,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x3F,0x07,0x00,0x00
	},
	{	//	60%
		0x00,0x00,0xE0,0x20,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xE0,0x00,0x00,0x00,
		0x00,0x00,0x3F,0x20,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x3F,0x07,0x00,0x00
	},
	{	//	80%
		0x00,0x00,0xE0,0x20,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xE0,0x00,0x00,0x00,
		0x00,0x00,0x3F,0x20,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x3F,0x07,0x00,0x00
	},
	{	//	100%
		0x00,0x00,0xE0,0x20,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0x20,0xE0,0x00,0x00,0x00,
		0x00,0x00,0x3F,0x20,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x20,0x3F,0x07,0x00,0x00
	}
};

unsigned char bluetooth[][16] =		//	8 * 16
{
	{	//	none
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	},
	{	//	bt
		0x00,0x20,0x40,0x80,0xF8,0x10,0xA0,0x40,
		0x00,0x08,0x04,0x02,0x3F,0x11,0x0A,0x04
	}
};
unsigned char check_bar[][128] =		//	64 * 16
{
	{	//	0%
		0xF8,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0xF8,0x00,0x00,
		0x0F,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0x00,0x00
	},
	{	//	10%
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0xF8,0x00,0x00,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0x00,0x00
	},
	{	//	20%
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0xF8,0x00,0x00,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0x00,0x00
	},
	{	//	30%
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
		0xF8,0xF8,0xF8,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0xF8,0x00,0x00,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0x00,0x00
	},
	{	//	40%
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0xF8,0x00,0x00,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0x00,0x00
	},
	{	//	50%
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0xF8,0x00,0x00,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0x00,0x00
	},
	{	//	60%
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
		0xF8,0xF8,0xF8,0xF8,0xF8,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0xF8,0x00,0x00,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0x00,0x00
	},
	{	//	70%
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0xF8,0x00,0x00,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x08,0x08,0x08,0x08,0x08,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0x00,0x00
	},
	{	//	80%
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
		0xF8,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0xF8,0x00,0x00,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0x00,0x00
	},
	{	//	90%
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0x08,0x08,0x08,0x08,0x08,0x08,0xF8,0x00,0x00,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0x00,0x00
	},
	{	//	100%
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
		0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0x00,0x00,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x00,0x00
	}
};



/* TWI instance. */
static const nrf_drv_twi_t m_twi = NRF_DRV_TWI_INSTANCE(1);

/* Indicates if operation on TWI has ended. */
static volatile bool m_xfer_done = false;

void twi_handler_i2c(nrf_drv_twi_evt_t const * p_event, void * p_context)
{
	switch (p_event->type)
    {
        case NRF_DRV_TWI_EVT_DONE:
            m_xfer_done = true;
            break;
        case NRF_DRV_TWI_EVT_ADDRESS_NACK:
            break;
        case NRF_DRV_TWI_EVT_DATA_NACK:
            break;
        default:
            break;
    }
}
void twi_init(void)
{
		ret_code_t err_code;

    const nrf_drv_twi_config_t twi_config = {
        .scl            = TWI_SCL_PIN,
        .sda            = TWI_SDA_PIN,
        .frequency      = NRF_TWI_FREQ_400K,
        .interrupt_priority = APP_IRQ_PRIORITY_HIGH
    };

    err_code = nrf_drv_twi_init(&m_twi, &twi_config, twi_handler_i2c, NULL);
    APP_ERROR_CHECK(err_code);

    nrf_drv_twi_enable(&m_twi);
}

 ret_code_t bma250_I2C_data_read( uint8_t reg_addr,  uint8_t * p_rx_data, uint32_t bytes)
{
    ret_code_t ret_code;

	  uint8_t tx_data[1];
    tx_data[0] = 0x02;

  	nrf_delay_ms(150);

    ret_code = nrf_drv_twi_tx(&m_twi,BMA250_ADDRESS, tx_data, sizeof(tx_data), false);
		if(ret_code != NRF_SUCCESS)
    {
        return ret_code;
    }

		nrf_delay_ms(150);

    ret_code = nrf_drv_twi_rx(&m_twi, BMA250_ADDRESS, p_rx_data, bytes);
    return ret_code;
		
}

ret_code_t OLED_I2C_register_write(uint8_t * p_tx_data, uint8_t bytes)
{
    ret_code_t ret_code;
    uint8_t tx_data[bytes+1];
    tx_data[0] = 0x00;
    
    for(uint8_t i = 0 ; i<bytes ; i++) 
    {
        tx_data[i+1] = p_tx_data[i];
    }   
    ret_code = nrf_drv_twi_tx(&m_twi, OLED_ADDRESS, tx_data, sizeof(tx_data), true);

		m_xfer_done = false;
		while(!m_xfer_done); 

    return ret_code;
}
ret_code_t OLED_I2C_data_write(uint8_t p_tx_data, uint8_t bytes)
{
    ret_code_t ret_code;
    uint8_t tx_data[bytes+1];
    tx_data[0] = 0x40;
    
    for(uint8_t i = 0 ; i<bytes ; i++) 
    {
        tx_data[i+1] = p_tx_data;
    }   
    ret_code = nrf_drv_twi_tx(&m_twi, OLED_ADDRESS, tx_data, sizeof(tx_data), true);

		m_xfer_done = false;
		while(!m_xfer_done); 

    return ret_code;
}




void page_init(uint8_t y , uint8_t z)
{
				uint8_t tx_on_data[1];
				tx_on_data[0] = 0xB0+y;
		   OLED_I2C_register_write(tx_on_data,1);
				tx_on_data[0] = 0x02+z;
				OLED_I2C_register_write(tx_on_data, 1);
				tx_on_data[0] = 0x10 +z;
				OLED_I2C_register_write(tx_on_data, 1);
}	
void page_init_progress(uint8_t y)
{
				uint8_t tx_on_data[1];
				tx_on_data[0] = 0xB0+y;
		   OLED_I2C_register_write(tx_on_data,1);
				tx_on_data[0] = 0x2+3;
				OLED_I2C_register_write(tx_on_data, 1);
				tx_on_data[0] = 0x10+3;
				OLED_I2C_register_write(tx_on_data, 1);
}

void show_zaigle(void)
{ 
	uint8_t x,y;
	uint16_t j=0;

	for(y=0;y<8;y++)
	{
		page_init(y, 0);
		for(x=0;x<128;x++)
	 {
			OLED_I2C_data_write(zaigle_image[j++], 1);
	 }
	}
}

void fill_i2c()	
{                       
				uint8_t x,y;

				for(y=0;y<8;y++)
        {
							page_init(y, 0);
							for(x=0;x<128;x++)
             {
								OLED_I2C_data_write(0x00, 1);
             }
       }             
}
void screen_image_init()	
{                       
				int x,y;
				for(y=0;y<8;y++)
        {
							for(x=0;x<128;x++)
             {
								screen_image[ y * 128 + x ] = 0x00;
             }
       }             
}
void fill_screen_i2c()	
{
				int x,y;

				for(y=0;y<8;y++)
        {
							page_init(y, 0);
							for(x=0;x<128;x++)
             {
								OLED_I2C_data_write(screen_image[y * 128 + x], 1);
             }
				}
}

void show_battery(uint32_t value) 
{ 
		bat_v = value;
}
void s_battery() 
{ 
		uint8_t x,y;
		uint16_t j=0,h=0,t=0,o=0,p=0;

		int hand = 0, one = 0, ten = 0;
		if ( bat_v >= 100 ) {
				hand = 1;
				one = 0;
				ten = 0;
		} else {
				one = bat_v%10;
				ten = bat_v/10;
		}

		for(y=0;y<2;y++)
		{
			if ( bat_v >= 100 ) {
				for(x=76;x<81;x++)
				{
						screen_image[ y * 128 + x ] = small_number[hand][h++];
				}
			}
				for(x=82;x<87;x++)
				{
						screen_image[ y * 128 + x ] = small_number[ten][t++];
				}
				for(x=88;x<93;x++)
				{
						screen_image[ y * 128 + x ] = small_number[one][o++];
				}
				for(x=94;x<102;x++)
				{
						screen_image[ y * 128 + x ] = small_percent[p++];
				}
		}

		for(y=0;y<2;y++)
		{
				for(x=104;x<128;x++)
				{
						screen_image[ y * 128 + x ] = icon_battery[(bat_v/20)][j++];
				}
		}
}
void show_bt(int flag) 
{ 
		bt_c = flag;
}
void s_bt() 
{ 
		uint8_t x,y;
		uint16_t j=0;

		for(y=0;y<2;y++)
		{
				for(x=64;x<72;x++)
				{
						screen_image[ y * 128 + x ] = bluetooth[bt_c][j++];
				}
		}
}


void show_time(int month, int day, int hour, int min, int wday) 
{ 
		NRF_LOG_INFO("show_time  %d/%d %d:%d ", month, day, hour, min);
		NRF_LOG_FLUSH();

		int x,y;
		int s=0,w=0,c=0,mt=0,mo=0,dt=0,do0=0,ht=0,ho=0,nt=0,no=0,wd=0;

		screen_image_init();
		s_battery();
		s_bt();

		int month_one = month%10;
		int month_ten = month/10;
		int day_one = day%10;
		int day_ten = day/10;

		for(y=0;y<2;y++)
		{
				for(x=5;x<10;x++)
				{
						screen_image[ y * 128 + x ] = small_number[month_ten][mt++];
				}
				for(x=11;x<16;x++)
				{
						screen_image[ y * 128 + x ] = small_number[month_one][mo++];
				}
				for(x=16;x<21;x++)
				{
						screen_image[ y * 128 + x ] = small_number[10][s++];
				}
				for(x=22;x<27;x++)
				{
						screen_image[ y * 128 + x ] = small_number[day_ten][dt++];
				}
				for(x=28;x<33;x++)
				{
						screen_image[ y * 128 + x ] = small_number[day_one][do0++];
				}
				for(x=37;x<61;x++)
				{
						screen_image[ y * 128 + x ] = wday_number[wday][wd++];
				}
		}



	
		int hour_one = hour%10;
		int hour_ten = hour/10;
		int min_one = min%10;
		int min_ten = min/10;

		for(y=3;y<7;y++)
		{
				for(x=24;x<40;x++)
				{
						screen_image[ y * 128 + x ] = large_number[hour_ten][ht++];
				}
				for(x=40;x<56;x++)
				{
						screen_image[ y * 128 + x ] = large_number[hour_one][ho++];
				}
				for(x=56;x<72;x++)
				{
						screen_image[ y * 128 + x ] = large_number[10][c++];
				}
				for(x=72;x<88;x++)
				{
						screen_image[ y * 128 + x ] = large_number[min_ten][nt++];
				}
				for(x=88;x<104;x++)
				{
						screen_image[ y * 128 + x ] = large_number[min_one][no++];
				}
		}
		
		fill_i2c();
		fill_screen_i2c();
}

void show_stepcount(int step)
{
		NRF_LOG_INFO("show_setpcount  step = %d", step);
		NRF_LOG_FLUSH();

		int x,y;
		int it=0,i=0,s=0,h=0,t=0,o=0;

		screen_image_init();

		for(y=0;y<2;y++)
		{
				for(x=0;x<64;x++)
				{
						screen_image[ y * 128 + x ] = icon_title[4][it++];
				}
		}
		s_battery();
		s_bt();

		for(y=4;y<6;y++)
		{
				for(x=8;x<24;x++)
				{
						screen_image[ y * 128 + x ] = icon[4][i++];
				}
		}
		
		int sout = step/1000;
		step = step - (sout*1000);
		int hand = step/100;
		step = step - (hand*100);
		int one = (int)step%10;
		int ten = step/10;
									
		for(y=3;y<7;y++)
		{
				for(x=41;x<57;x++)
				{
						screen_image[ y * 128 + x ] = large_number[sout][s++];
				}
				for(x=56;x<72;x++)
				{
						screen_image[ y * 128 + x ] = large_number[hand][h++];
				}
				for(x=71;x<87;x++)
				{
						screen_image[ y * 128 + x ] = large_number[ten][t++];
				}
				for(x=86;x<102;x++)
				{
						screen_image[ y * 128 + x ] = large_number[one][o++];
				}
		}
		
		fill_i2c();
		fill_screen_i2c();
}
void show_stepcal(int step)
{
		NRF_LOG_INFO("show_setpcount  step = %d", step);
		NRF_LOG_FLUSH();

		int x,y;
		int it=0,i=0,m=0,s=0,h=0,t=0,o=0, iu=0;

		screen_image_init();

		for(y=0;y<2;y++)
		{
				for(x=0;x<64;x++)
				{
						screen_image[ y * 128 + x ] = icon_title[4][it++];
				}
		}
		s_battery();
		s_bt();

		for(y=4;y<6;y++)
		{
				for(x=5;x<21;x++)
				{
						screen_image[ y * 128 + x ] = icon[5][i++];
				}
		}
		step = step * 3;
		int milien = step/10000;
		step = step - (milien*10000);
		int sout = step/1000;
		step = step - (sout*1000);
		int hand = step/100;
		step = step - (hand*100);
		int one = (int)step%10;
		int ten = step/10;
									
		for(y=3;y<7;y++)
		{
				for(x=25;x<41;x++)
				{
						screen_image[ y * 128 + x ] = large_number[milien][m++];
				}
				for(x=40;x<56;x++)
				{
						screen_image[ y * 128 + x ] = large_number[sout][s++];
				}
				for(x=55;x<71;x++)
				{
						screen_image[ y * 128 + x ] = large_number[hand][h++];
				}
				for(x=70;x<86;x++)
				{
						screen_image[ y * 128 + x ] = large_number[ten][t++];
				}
				for(x=85;x<101;x++)
				{
						screen_image[ y * 128 + x ] = large_number[one][o++];
				}
		}

		for(y=5;y<7;y++)
		{
				for(x=103;x<127;x++)
				{
						screen_image[ y * 128 + x ] = icon_unit[5][iu++];
				}
				iu = iu + 8;
		}
		
		fill_i2c();
		fill_screen_i2c();
}
void show_heartrate(int heartrate)
{
		NRF_LOG_INFO("show_heartrate  heartrate = %d", heartrate);
		NRF_LOG_FLUSH();

		int x,y;
		int it=0,i=0,h=0,t=0,o=0, iu=0;

		screen_image_init();

		for(y=0;y<2;y++)
		{
				for(x=0;x<64;x++)
				{
						screen_image[ y * 128 + x ] = icon_title[0][it++];
				}
		}
		s_battery();
		s_bt();

		for(y=4;y<6;y++)
		{
				for(x=5;x<21;x++)
				{
						screen_image[ y * 128 + x ] = icon[0][i++];
				}
		}
		
		int hand = 0, one = 0, ten = 0;
		if ( heartrate == 100 ) {
				hand = 1;
				one = 0;
				ten = 0;
		} else {
				one = heartrate%10;
				ten = heartrate/10;
		}

		for(y=3;y<7;y++)
		{
				for(x=41;x<57;x++)
				{
						screen_image[ y * 128 + x ] = large_number[hand][h++];
				}
				for(x=56;x<72;x++)
				{
						screen_image[ y * 128 + x ] = large_number[ten][t++];
				}
				for(x=71;x<87;x++)
				{
						screen_image[ y * 128 + x ] = large_number[one][o++];
				}
		}

		for(y=5;y<7;y++)
		{
				for(x=92;x<124;x++)
				{
						screen_image[ y * 128 + x ] = icon_unit[0][iu++];
				}
		}
		
		fill_i2c();
		fill_screen_i2c();
}

void show_spo2(int spo2)
{
		NRF_LOG_INFO("show_spo2  spo2 = %d", spo2);
		NRF_LOG_FLUSH();

		int x,y;
		int it=0,i=0,h=0,t=0,o=0, iu=0;

		screen_image_init();

		for(y=0;y<2;y++)
		{
				for(x=0;x<64;x++)
				{
						screen_image[ y * 128 + x ] = icon_title[1][it++];
				}
		}
		s_battery();
		s_bt();

		for(y=4;y<6;y++)
		{
				for(x=5;x<21;x++)
				{
						screen_image[ y * 128 + x ] = icon[1][i++];
				}
		}
		
		int hand = 0, one = 0, ten = 0;
		if ( spo2 == 100 ) {
				hand = 1;
				one = 0;
				ten = 0;
		} else {
				one = spo2%10;
				ten = spo2/10;
		}
		
		for(y=3;y<7;y++)
		{
				for(x=41;x<57;x++)
				{
						screen_image[ y * 128 + x ] = large_number[hand][h++];
				}
				for(x=56;x<72;x++)
				{
						screen_image[ y * 128 + x ] = large_number[ten][t++];
				}
				for(x=71;x<87;x++)
				{
						screen_image[ y * 128 + x ] = large_number[one][o++];
				}
		}

		for(y=5;y<7;y++)
		{
				for(x=92;x<124;x++)
				{
						screen_image[ y * 128 + x ] = icon_unit[1][iu++];
				}
		}
		
		fill_i2c();
		fill_screen_i2c();
}
void show_stress(int stress)
{
		NRF_LOG_INFO("show_stress  stress = %d", stress);
		NRF_LOG_FLUSH();

		int x,y;
		int it=0,i=0,h=0,t=0,o=0, iu=0;

		screen_image_init();

		for(y=0;y<2;y++)
		{
				for(x=0;x<64;x++)
				{
						screen_image[ y * 128 + x ] = icon_title[2][it++];
				}
		}
		s_battery();
		s_bt();

		for(y=4;y<6;y++)
		{
				for(x=5;x<21;x++)
				{
						screen_image[ y * 128 + x ] = icon[2][i++];
				}
		}
		
		int hand = 0, one = 0, ten = 0;
		if ( stress == 100 ) {
				hand = 1;
				one = 0;
				ten = 0;
		} else {
				one = stress%10;
				ten = stress/10;
		}

		for(y=3;y<7;y++)
		{
				for(x=41;x<57;x++)
				{
						screen_image[ y * 128 + x ] = large_number[hand][h++];
				}
				for(x=56;x<72;x++)
				{
						screen_image[ y * 128 + x ] = large_number[ten][t++];
				}
				for(x=71;x<87;x++)
				{
						screen_image[ y * 128 + x ] = large_number[one][o++];
				}
		}

		for(y=5;y<7;y++)
		{
				for(x=92;x<124;x++)
				{
						screen_image[ y * 128 + x ] = icon_unit[2][iu++];
				}
		}
		
		fill_i2c();
		fill_screen_i2c();
}

void show_bodyfat_weight(int fat, int weight)
{
		NRF_LOG_INFO("show_bodyfat_weight  fat = %d", fat);
		NRF_LOG_FLUSH();

		int x,y;
		int it=0,i=0,h=0,t=0,o=0, iu=0;

		screen_image_init();

		for(y=0;y<2;y++)
		{
				for(x=0;x<64;x++)
				{
						screen_image[ y * 128 + x ] = icon_title[3][it++];
				}
		}
		s_battery();
		s_bt();

		for(y=4;y<6;y++)
		{
				for(x=5;x<21;x++)
				{
						screen_image[ y * 128 + x ] = icon[3][i++];
				}
		}
		
		int fat_kg = ( weight * fat)  / 100;
		int hand = fat_kg/100;
		fat_kg = fat_kg - (hand*100);
		int one = (int)fat_kg%10;
		int ten = fat_kg/10;

		for(y=3;y<7;y++)
		{
				for(x=41;x<57;x++)
				{
						screen_image[ y * 128 + x ] = large_number[hand][h++];
				}
				for(x=56;x<72;x++)
				{
						screen_image[ y * 128 + x ] = large_number[ten][t++];
				}
				for(x=71;x<87;x++)
				{
						screen_image[ y * 128 + x ] = large_number[one][o++];
				}
		}

		for(y=5;y<7;y++)
		{
				for(x=92;x<124;x++)
				{
						screen_image[ y * 128 + x ] = icon_unit[3][iu++];
				}
		}
		
		fill_i2c();
		fill_screen_i2c();
}
void show_bodyfat(int fat)
{
		NRF_LOG_INFO("show_bodyfat  fat = %d", fat);
		NRF_LOG_FLUSH();

		int x,y;
		int it=0,i=0,h=0,t=0,o=0, iu=0;

		screen_image_init();

		for(y=0;y<2;y++)
		{
				for(x=0;x<64;x++)
				{
						screen_image[ y * 128 + x ] = icon_title[6][it++];
				}
		}
		s_battery();
		s_bt();

		for(y=4;y<6;y++)
		{
				for(x=5;x<21;x++)
				{
						screen_image[ y * 128 + x ] = icon[3][i++];
				}
		}
		
		int hand = 0, one = 0, ten = 0;
		if ( fat == 100 ) {
				hand = 1;
				one = 0;
				ten = 0;
		} else {
				one = fat%10;
				ten = fat/10;
		}

		for(y=3;y<7;y++)
		{
				for(x=41;x<57;x++)
				{
						screen_image[ y * 128 + x ] = large_number[hand][h++];
				}
				for(x=56;x<72;x++)
				{
						screen_image[ y * 128 + x ] = large_number[ten][t++];
				}
				for(x=71;x<87;x++)
				{
						screen_image[ y * 128 + x ] = large_number[one][o++];
				}
		}

		for(y=5;y<7;y++)
		{
				for(x=92;x<124;x++)
				{
						screen_image[ y * 128 + x ] = icon_unit[1][iu++];
				}
		}
		
		fill_i2c();
		fill_screen_i2c();
}

void show_bmi(int bmi)
{
		NRF_LOG_INFO("show_bmi  bmi = %d", bmi);
		NRF_LOG_FLUSH();

		int x,y;
		int it=0,i=0,h=0,t=0,o=0, iu=0;

		screen_image_init();

		for(y=0;y<2;y++)
		{
				for(x=0;x<64;x++)
				{
						screen_image[ y * 128 + x ] = icon_title[7][it++];
				}
		}
		s_battery();
		s_bt();

		for(y=4;y<6;y++)
		{
				for(x=5;x<21;x++)
				{
						screen_image[ y * 128 + x ] = icon[3][i++];
				}
		}
		
		int hand = bmi/100;
		bmi = bmi - (hand*100);
		int one = (int)bmi%10;
		int ten = bmi/10;

		for(y=3;y<7;y++)
		{
				for(x=41;x<57;x++)
				{
						screen_image[ y * 128 + x ] = large_number[hand][h++];
				}
				for(x=56;x<72;x++)
				{
						screen_image[ y * 128 + x ] = large_number[ten][t++];
				}
				for(x=71;x<87;x++)
				{
						screen_image[ y * 128 + x ] = large_number[one][o++];
				}
		}

		for(y=5;y<7;y++)
		{
				for(x=92;x<124;x++)
				{
						screen_image[ y * 128 + x ] = icon_unit[6][iu++];
				}
		}
		
		fill_i2c();
		fill_screen_i2c();
}


void show_check_ready(int count)
{
		NRF_LOG_INFO("show_check_ready");
		NRF_LOG_FLUSH();

		int x,y;
		int it=0,i=0;

		screen_image_init();

		for(y=0;y<2;y++)
		{
				for(x=0;x<64;x++)
				{
						screen_image[ y * 128 + x ] = icon_title[5][it++];
				}
		}

		s_bt();
		s_battery();

		fill_i2c();
		fill_screen_i2c();
		
		show_check_ready_count(count);
}
void show_check_ready_count(int time)
{
		NRF_LOG_INFO("show_check_progress");
		NRF_LOG_FLUSH();

		int x,y;
		int it=0,i=0,iu=0;

		for(y=3;y<7;y++)
		{
				page_init_progress(y);
				for(x=0;x<16;x++)
				{
								OLED_I2C_data_write(large_number[time][iu++], 1);
				}
		}
}

void show_check(int time)
{
		NRF_LOG_INFO("show_check");
		NRF_LOG_FLUSH();

		int x,y;
		int it=0,i=0,iu=0;

		screen_image_init();

		for(y=0;y<2;y++)
		{
				for(x=0;x<64;x++)
				{
						screen_image[ y * 128 + x ] = icon_title[5][it++];
				}
		}
		s_bt();
		s_battery();

		for(y=4;y<6;y++)
		{
				for(x=16;x<32;x++)
				{
						screen_image[ y * 128 + x ] = icon[6][i++];
				}
		}
		for(y=4;y<6;y++)
		{
				for(x=51;x<115;x++)
				{
						screen_image[ y * 128 + x ] = check_bar[time][iu++];
				}
		}

		fill_i2c();
		fill_screen_i2c();
}
void show_check_progress(int time)
{
		NRF_LOG_INFO("show_check_progress");
		NRF_LOG_FLUSH();

		int x,y;
		int it=0,i=0,iu=0;

		for(y=4;y<6;y++)
		{
				page_init_progress(y);
				for(x=0;x<64;x++)
				{
								OLED_I2C_data_write(check_bar[time][iu++], 1);
				}
		}
}
void show_check_fail()
{
		NRF_LOG_INFO("show_check_fail");
		NRF_LOG_FLUSH();

		int x,y;
		int it=0,i=0,iu=0;

		screen_image_init();

		for(y=0;y<2;y++)
		{
				for(x=0;x<64;x++)
				{
						screen_image[ y * 128 + x ] = icon_title[5][it++];
				}
		}
		s_battery();
		s_bt();

		for(y=4;y<6;y++)
		{
				for(x=16;x<32;x++)
				{
						screen_image[ y * 128 + x ] = icon[7][i++];
				}
		}
		for(y=4;y<6;y++)
		{
				for(x=48;x<112;x++)
				{
						screen_image[ y * 128 + x ] = check_bar[0][iu++];
				}
		}
		
		fill_i2c();
		fill_screen_i2c();
}





ret_code_t max30102_I2C_register_write(uint8_t reg_addr, uint8_t * p_tx_data, uint8_t bytes)
{
    ret_code_t ret_code;
    uint8_t tx_data[bytes+1];
    tx_data[0] = reg_addr;
    
    for(uint8_t i = 0 ; i<bytes ; i++) 
    {
        tx_data[i+1] = p_tx_data[i];
    }   
    ret_code = nrf_drv_twi_tx(&m_twi, MAX30102_ADDRESS, tx_data, sizeof(tx_data), true);

		m_xfer_done = false;
		while(!m_xfer_done); 

    return ret_code;
}

ret_code_t max30102_I2C_data_read( uint8_t reg_addr,  uint8_t * p_rx_data, uint32_t bytes)
{   
    ret_code_t ret_code;
    ret_code = nrf_drv_twi_tx(&m_twi,MAX30102_ADDRESS, &reg_addr, 1, true);
    if(ret_code != NRF_SUCCESS)
    {
        return ret_code;
    } else {
			m_xfer_done = false;
		while(!m_xfer_done);
    ret_code = nrf_drv_twi_rx(&m_twi, MAX30102_ADDRESS, p_rx_data, bytes);
    return ret_code;
		}
}

bool maxim_max30102_read_fifo(uint32_t *pun_red_led, uint32_t *pun_ir_led)
/**
* \brief        Read a set of samples from the MAX30102 FIFO register
* \par          Details
*               This function reads a set of samples from the MAX30102 FIFO register
*
* \param[out]   *pun_red_led   - pointer that stores the red LED reading data
* \param[out]   *pun_ir_led    - pointer that stores the IR LED reading data
*
* \retval       true on success
*/
{
  uint32_t un_temp;
  uint8_t uch_temp;
  *pun_red_led=0;
  *pun_ir_led=0;
  uint8_t ach_i2c_data[6];

  //read and clear status register
  max30102_I2C_data_read(REG_INTR_STATUS_1, &uch_temp, 1);
  max30102_I2C_data_read(REG_INTR_STATUS_2, &uch_temp, 1);


    ach_i2c_data[0] = REG_FIFO_DATA;
    nrf_drv_twi_tx(&m_twi,MAX30102_ADDRESS, ach_i2c_data, 1, true);
    m_xfer_done = false;
    while(!m_xfer_done);
    nrf_drv_twi_rx(&m_twi, MAX30102_ADDRESS, ach_i2c_data, 6);

  un_temp=(unsigned char) ach_i2c_data[0];
  un_temp<<=16;
  *pun_red_led+=un_temp;
  un_temp=(unsigned char) ach_i2c_data[1];
  un_temp<<=8;
  *pun_red_led+=un_temp;
  un_temp=(unsigned char) ach_i2c_data[2];
  *pun_red_led+=un_temp;
  
  un_temp=(unsigned char) ach_i2c_data[3];
  un_temp<<=16;
  *pun_ir_led+=un_temp;
  un_temp=(unsigned char) ach_i2c_data[4];
  un_temp<<=8;
  *pun_ir_led+=un_temp;
  un_temp=(unsigned char) ach_i2c_data[5];
  *pun_ir_led+=un_temp;
  *pun_red_led&=0x03FFFF;  //Mask MSB [23:18]
  *pun_ir_led&=0x03FFFF;  //Mask MSB [23:18]
  return true;
}


void bma250_init(void)
{
		uint8_t tx_data[5]	=	{0x0F,	0x03,	0x10,	0x08,	0x11};

    APP_ERROR_CHECK(nrf_drv_twi_tx(&m_twi, BMA250_ADDRESS,  tx_data, sizeof(tx_data), true));

/*
uint32_t i=0;
    while (true)
    {
      NRF_LOG_INFO("while start.");
      NRF_LOG_FLUSH();

			ret_code_t err_code;
			uint8_t val[6];
	    err_code = bma250_I2C_data_read(BMA250_ADDRESS,val,sizeof(val));
			APP_ERROR_CHECK(err_code);
			
			float xAccl = ((val[1] * 256.0) + (val[0] & 0xC0)) / 64;
			if (xAccl > 511)
			{
				xAccl -= 1024;
			}
			float yAccl = ((val[3] * 256.0) + (val[2] & 0xC0)) / 64;
			if (yAccl > 511)
			{
				yAccl -= 1024;
			}
			float zAccl = ((val[5] * 256.0) + (val[4] & 0xC0)) / 64;
			if (zAccl > 511)
			{
				zAccl -= 1024;
			}

	// Output data to the serial monitor
  NRF_LOG_INFO(" Acceleration in X-Axis := %i", xAccl);
  NRF_LOG_INFO(" Acceleration in Y-Axis := %i", yAccl);
  NRF_LOG_INFO(" Acceleration in Z-Axis := %i", zAccl);

	nrf_delay_ms(1000);

	NRF_LOG_INFO("\r\nBMA250 sensor = %i", i);
  NRF_LOG_FLUSH();

i++;
if ( i > 60 ) { i =0; }
    }
*/		
}


void oled_init_i2c(void)
{
		//external
		uint8_t tx_on_data[25]	= {0xAE,	0x02,	0x10,	0x40,	0xB0,	0x81,	0xBF,	0xA1,	0xA6,	0xA8,	0x3F,	0xad,	0x8a,	0x32,	0xC8,	0xD3,	0x00,	0xD5,	0x80,	0xD9,		0x22,	0xDA,	0x12,	0xdb,	0x40};
		// internal
		//uint8_t tx_on_data[25]	= {0xAE,	0x02,	0x10,	0x40,	0xB0,	0x81,	0xff,	0xA1,	0xA6,	0xA8,	0x3F,	0xad,	0x8b,	0x33,	0xC8,	0xD3,	0x00,	0xD5,	0x80,	0xD9,	0x1f,	0xDA,	0x12,	0xdb,	0x40};
		//uint8_t tx_on_data[1];

    NRF_LOG_INFO("Init OLED.");
    NRF_LOG_FLUSH();
    		
		nrf_gpio_cfg_output(OLED_RST);
		nrf_gpio_pin_write(OLED_RST, LOW);
	  nrf_delay_ms(500);
	  nrf_gpio_pin_write(OLED_RST, HIGH);
	  nrf_delay_ms(500);
	
	  OLED_I2C_register_write(tx_on_data, 1);

		nrf_gpio_cfg_output(OLED_PW);
	  nrf_gpio_pin_write(OLED_PW, HIGH);
		nrf_delay_ms(100);

		tx_on_data[0] = 0xAF;
	  OLED_I2C_register_write(tx_on_data, 1);

		NRF_LOG_INFO(" OLED END");
    NRF_LOG_FLUSH();
}	
	
	
uint32_t ppg_init(uint32_t *hb, uint32_t *sp)
{
  uint32_t un_min, un_max, un_prev_data;  //variables to calculate the on-board LED brightness that reflects the heartbeats
	uint32_t red, ir, red_pre, ir_pre, red_count, ir_count;
  int32_t un_brightness, returnvalue=0;
  float f_temp;
	int i;

  NRF_LOG_INFO("I2C PPG.");
  NRF_LOG_FLUSH();

	ret_code_t err_code;
	uint8_t data_write;

  NRF_LOG_INFO("init start");
  NRF_LOG_FLUSH();

	data_write = 0x40;
	err_code = max30102_I2C_register_write(REG_MODE_CONFIG, &data_write, 1);
  APP_ERROR_CHECK(err_code);
	err_code = max30102_I2C_data_read(REG_FIFO_DATA, 0, 0);
  data_write = 0xc0;
	err_code = max30102_I2C_register_write(REG_INTR_ENABLE_1, &data_write, 1);
  APP_ERROR_CHECK(err_code);
  data_write = 0x00;
	err_code = max30102_I2C_register_write(REG_INTR_ENABLE_2, &data_write, 1);
  APP_ERROR_CHECK(err_code);

  data_write = 0x00;
	err_code = max30102_I2C_register_write(REG_FIFO_WR_PTR, &data_write, 1);
  APP_ERROR_CHECK(err_code);
  data_write = 0x00;
	err_code = max30102_I2C_register_write(REG_OVF_COUNTER, &data_write, 1);
  APP_ERROR_CHECK(err_code);
  data_write = 0x00;
	err_code = max30102_I2C_register_write(REG_FIFO_RD_PTR, &data_write, 1);
  APP_ERROR_CHECK(err_code);
  data_write = 0x4f;
	err_code = max30102_I2C_register_write(REG_FIFO_CONFIG, &data_write, 1);
  APP_ERROR_CHECK(err_code);
  data_write = 0x03;
	err_code = max30102_I2C_register_write(REG_MODE_CONFIG, &data_write, 1);
  APP_ERROR_CHECK(err_code);
  data_write = 0x27;
	err_code = max30102_I2C_register_write(REG_SPO2_CONFIG, &data_write, 1);
  APP_ERROR_CHECK(err_code);
  data_write = 0x24;
	err_code = max30102_I2C_register_write(REG_LED1_PA, &data_write, 1);
  APP_ERROR_CHECK(err_code);
  data_write = 0x24;
	err_code = max30102_I2C_register_write(REG_LED2_PA, &data_write, 1);
  APP_ERROR_CHECK(err_code);
  data_write = 0x7f;
	err_code = max30102_I2C_register_write(REG_PILOT_PA, &data_write, 1);
  APP_ERROR_CHECK(err_code);

	  NRF_LOG_INFO("init end");
  NRF_LOG_FLUSH();

	returnvalue = ppg_start(hb, sp);
	
  data_write = 0x80;
	err_code = max30102_I2C_register_write(REG_MODE_CONFIG, &data_write, 1);
  APP_ERROR_CHECK(err_code);
	
  fill_i2c();
  return 	returnvalue;
}

	uint32_t ppg_start(uint32_t *hb, uint32_t *sp)
{

	  NRF_LOG_INFO("ppg ppg_start");
  NRF_LOG_FLUSH();

  uint32_t un_min, un_max, un_prev_data;  //variables to calculate the on-board LED brightness that reflects the heartbeats
	uint32_t red, ir, red_pre, ir_pre, red_count, ir_count;
  int32_t un_brightness;
  float f_temp;
	int i;
	
	  un_brightness=0;
    un_min=0x3FFFF;
    un_max=0;
		
		red = 0;
		ir = 0;
		red_pre = 0;
		ir_pre = 0;
		red_count = 0;
		ir_count = 0;
  
    n_ir_buffer_length=500; //buffer length of 100 stores 5 seconds of samples running at 100sps
    
    //read the first 500 samples, and determine the signal range
    for(i=0;i<n_ir_buffer_length;i++)
    {
        
        maxim_max30102_read_fifo((aun_red_buffer+i), (aun_ir_buffer+i));  //read from MAX30102 FIFO
            
        if(un_min>aun_red_buffer[i])
            un_min=aun_red_buffer[i];    //update signal min
        if(un_max<aun_red_buffer[i])
            un_max=aun_red_buffer[i];    //update signal max
    }
    maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid); 

  NRF_LOG_INFO("ppg 500 end");
  NRF_LOG_FLUSH();

uint32_t totalcount=0;
		uint32_t hbcount=0, spcount = 0;
    while (true)
    {
        //dumping the first 100 sets of samples in the memory and shift the last 400 sets of samples to the top
        for(i=100;i<500;i++)
        {
            aun_red_buffer[i-100]=aun_red_buffer[i];
            aun_ir_buffer[i-100]=aun_ir_buffer[i];
            
            //update the signal min and max
            if(un_min>aun_red_buffer[i])
            un_min=aun_red_buffer[i];
            if(un_max<aun_red_buffer[i])
            un_max=aun_red_buffer[i];
        }
        
        //take 100 sets of samples before calculating the heart rate.
        for(i=400;i<500;i++)
        {
            un_prev_data=aun_red_buffer[i-1];
            maxim_max30102_read_fifo((aun_red_buffer+i), (aun_ir_buffer+i));
        
            if(aun_red_buffer[i]>un_prev_data)
            {
                f_temp=aun_red_buffer[i]-un_prev_data;
                f_temp/=(un_max-un_min);
                f_temp*=MAX_BRIGHTNESS;
							  f_temp=un_brightness-f_temp;
                if(f_temp<0)
                  un_brightness=0;
                else
                  un_brightness=(int)f_temp;
            }
            else
            {
                f_temp=un_prev_data-aun_red_buffer[i];
                f_temp/=(un_max-un_min);
                f_temp*=MAX_BRIGHTNESS;
                un_brightness+=(int)f_temp;
                if(un_brightness>MAX_BRIGHTNESS)
                    un_brightness=MAX_BRIGHTNESS;
            }
        }

				if ( ch_hr_valid == 1 ) {
					if ( n_heart_rate < 180  && n_heart_rate > 40 ) {
						if ( n_heart_rate != red_pre ) {
						  red = red+n_heart_rate;
						  red_count++;
						}
						red_pre = n_heart_rate;
					}
				} else hbcount = hbcount+1;
				if ( ch_spo2_valid == 1 ) {
					if ( n_sp02 < 101 && n_sp02 > 80 ) {
						if ( n_sp02 != ir_pre ) {
							ir = ir+n_sp02;
							ir_count++;
						}
						ir_pre = n_sp02;
					}
				} else spcount = spcount+1;
		    maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid); 
					
        totalcount++;
				if ( totalcount == 100 ) { 
					  NRF_LOG_INFO("ppg 100 end");
  NRF_LOG_FLUSH();
      	show_check_progress(6);
				}
				if ( totalcount == 200 ) { 
					  NRF_LOG_INFO("ppg 200 end");
  NRF_LOG_FLUSH();
      	show_check_progress(8);
				}
				if ( totalcount == 300 ) { 
					  NRF_LOG_INFO("ppg 300 end");
  NRF_LOG_FLUSH();
      	show_check_progress(10);
				}
				
        if ( totalcount > 400 ) {
					  NRF_LOG_INFO("ppg 400 up");
  NRF_LOG_FLUSH();
					
					*hb = red / red_count;
					*sp = ir / ir_count;

	NRF_LOG_INFO("ppg hbcount = %d, spcount = %d", hbcount, spcount);
  NRF_LOG_INFO("ppg red_count = %d, ir_count = %d", red_count, ir_count);
  NRF_LOG_INFO("ppg red = %d, ir = %d", red, ir);
  NRF_LOG_INFO("ppg totalcount = %d", totalcount);
  NRF_LOG_FLUSH();

					
					if ( (red / red_count) > 50 && (red / red_count) < 100 && (ir / ir_count) > 90 ) {
						if ( spcount > 300 ) return 1;
					}

					if ( spcount > 385 && ir_count > 0) return 1;
					else return 0;
				}

    }

}

